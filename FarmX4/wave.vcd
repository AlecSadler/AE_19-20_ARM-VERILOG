$date
	Wed Oct 23 19:25:08 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 8 ! res2 [7:0] $end
$var wire 8 " res1 [7:0] $end
$var reg 1 # clk $end
$var reg 8 $ num1 [7:0] $end
$var reg 8 % num2 [7:0] $end
$var integer 32 & i [31:0] $end
$scope module m1 $end
$var wire 1 # clk $end
$var wire 8 ' num1 [7:0] $end
$var wire 8 ( num2 [7:0] $end
$var wire 8 ) res2 [7:0] $end
$var wire 8 * res1 [7:0] $end
$var reg 8 + in_data1 [7:0] $end
$var reg 8 , in_data2 [7:0] $end
$scope module w1 $end
$var wire 1 # clk $end
$var wire 8 - in [7:0] $end
$var wire 8 . out [7:0] $end
$var wire 8 / bridge [7:0] $end
$var reg 8 0 in_data [7:0] $end
$scope module p1 $end
$var wire 8 1 in [7:0] $end
$var wire 8 2 z [7:0] $end
$upscope $end
$scope module p2 $end
$var wire 8 3 in [7:0] $end
$var wire 8 4 z [7:0] $end
$upscope $end
$upscope $end
$scope module w2 $end
$var wire 1 # clk $end
$var wire 8 5 in [7:0] $end
$var wire 8 6 out [7:0] $end
$var wire 8 7 bridge [7:0] $end
$var reg 8 8 in_data [7:0] $end
$scope module p1 $end
$var wire 8 9 in [7:0] $end
$var wire 8 : z [7:0] $end
$upscope $end
$scope module p2 $end
$var wire 8 ; in [7:0] $end
$var wire 8 < z [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
0#
bx "
bx !
$end
#3
1#
#4
0#
#7
1#
b0 &
#8
0#
#11
b0 0
b1 8
b1 ,
b1 5
b1 9
b0 +
b0 -
b0 1
1#
b10 &
b1 %
b1 (
b0 $
b0 '
#12
0#
#13
b10 7
b10 :
b10 ;
b0 /
b0 2
b0 3
#15
b11 ,
b11 5
b11 9
b10 +
b10 -
b10 1
b100 !
b100 )
b100 6
b100 <
b0 "
b0 *
b0 .
b0 4
1#
b100 &
b11 %
b11 (
b10 $
b10 '
#16
0#
#17
b110 7
b110 :
b110 ;
b100 /
b100 2
b100 3
#19
b100 0
b101 8
b101 ,
b101 5
b101 9
b100 +
b100 -
b100 1
b1100 !
b1100 )
b1100 6
b1100 <
b1000 "
b1000 *
b1000 .
b1000 4
1#
b110 &
b101 %
b101 (
b100 $
b100 '
#20
0#
#21
b1010 7
b1010 :
b1010 ;
b1000 /
b1000 2
b1000 3
#23
b111 ,
b111 5
b111 9
b110 +
b110 -
b110 1
b10100 !
b10100 )
b10100 6
b10100 <
b10000 "
b10000 *
b10000 .
b10000 4
1#
b1000 &
b111 %
b111 (
b110 $
b110 '
#24
0#
#25
b1110 7
b1110 :
b1110 ;
b1100 /
b1100 2
b1100 3
#27
b1000 0
b1001 8
b1001 ,
b1001 5
b1001 9
b1000 +
b1000 -
b1000 1
b11100 !
b11100 )
b11100 6
b11100 <
b11000 "
b11000 *
b11000 .
b11000 4
1#
b1010 &
b1001 %
b1001 (
b1000 $
b1000 '
#28
0#
#29
b10010 7
b10010 :
b10010 ;
b10000 /
b10000 2
b10000 3
#31
b100100 !
b100100 )
b100100 6
b100100 <
b100000 "
b100000 *
b100000 .
b100000 4
1#
#32
0#
#35
1#
#36
0#
#39
1#
#40
0#
#43
1#
#44
0#
#47
1#
#48
0#
#51
1#
#52
0#
#55
1#
#56
0#
#57
