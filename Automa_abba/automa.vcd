$date
	Tue Oct  8 19:36:49 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 1 ! z $end
$var reg 1 " clk $end
$var reg 2 # x [1:2] $end
$scope module automa $end
$var wire 1 " clk $end
$var wire 2 $ x [1:2] $end
$var wire 1 ! z $end
$var wire 2 % outreg [1:2] $end
$var wire 2 & inreg [1:2] $end
$scope module om $end
$var wire 2 ' x [1:2] $end
$var wire 1 ! z $end
$var wire 2 ( s [1:2] $end
$upscope $end
$scope module r $end
$var wire 1 " clk $end
$var wire 1 ) enable $end
$var wire 2 * inVal [1:2] $end
$var reg 2 + state [1:2] $end
$upscope $end
$scope module sm $end
$var wire 2 , s [1:2] $end
$var wire 2 - x [1:2] $end
$var wire 2 . dest [1:2] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bz1 .
b0 -
b0 ,
b0 +
bz1 *
1)
b0 (
b0 '
bz1 &
b0 %
b0 $
b0 #
0"
0!
$end
#2
0!
bz1 %
bz1 (
bz1 +
bz1 ,
1"
#3
0"
#4
bzx &
bzx *
bzx .
b1 #
b1 $
b1 '
b1 -
#5
bzx %
bzx (
bzx +
bzx ,
1"
#6
0"
#8
1"
#9
0"
#10
x!
b0 #
b0 $
b0 '
b0 -
#11
1"
#12
0"
#14
1"
#15
0"
#17
1"
#18
0"
#20
1"
