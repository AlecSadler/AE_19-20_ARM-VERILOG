$date
	Wed Oct 23 21:28:23 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 8 ! res1 [7:0] $end
$var reg 1 " clk $end
$var reg 8 # num1 [7:0] $end
$var integer 32 $ i [31:0] $end
$scope module m1 $end
$var wire 1 " clk $end
$var wire 8 % num1 [7:0] $end
$var wire 8 & res1 [7:0] $end
$var reg 8 ' in_data1 [7:0] $end
$scope module w1 $end
$var wire 1 " clk $end
$var wire 8 ( in [7:0] $end
$var wire 8 ) out [7:0] $end
$var wire 8 * bridge [7:0] $end
$var reg 8 + in_data [7:0] $end
$scope module p1 $end
$var wire 8 , in [7:0] $end
$var wire 8 - z [7:0] $end
$upscope $end
$scope module p2 $end
$var wire 8 . in [7:0] $end
$var wire 8 / z [7:0] $end
$upscope $end
$upscope $end
$scope module w2 $end
$var wire 1 " clk $end
$var wire 8 0 in [7:0] $end
$var wire 8 1 out [7:0] $end
$var wire 8 2 bridge [7:0] $end
$var reg 8 3 in_data [7:0] $end
$scope module p1 $end
$var wire 8 4 in [7:0] $end
$var wire 8 5 z [7:0] $end
$upscope $end
$scope module p2 $end
$var wire 8 6 in [7:0] $end
$var wire 8 7 z [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
0"
bx !
$end
#1
b0 $
1"
#2
0"
#3
b0 '
b0 (
b0 ,
b0 0
b0 4
1"
b1 $
b0 #
b0 %
#4
0"
#5
b1 +
b1 3
b1 '
b1 (
b1 ,
b1 0
b1 4
1"
b0 *
b0 -
b0 .
b0 2
b0 5
b0 6
b10 $
b1 #
b1 %
#6
0"
#7
b10 '
b10 (
b10 ,
b10 0
b10 4
1"
b10 *
b10 -
b10 .
b10 2
b10 5
b10 6
b0 !
b0 &
b0 )
b0 /
b0 1
b0 7
b11 $
b10 #
b10 %
#8
0"
#9
b11 +
b11 3
b11 '
b11 (
b11 ,
b11 0
b11 4
1"
b100 *
b100 -
b100 .
b100 2
b100 5
b100 6
b100 !
b100 &
b100 )
b100 /
b100 1
b100 7
b100 $
b11 #
b11 %
#10
0"
#11
b100 '
b100 (
b100 ,
b100 0
b100 4
1"
b110 *
b110 -
b110 .
b110 2
b110 5
b110 6
b1000 !
b1000 &
b1000 )
b1000 /
b1000 1
b1000 7
b101 $
b100 #
b100 %
#12
0"
#13
b101 +
b101 3
b101 '
b101 (
b101 ,
b101 0
b101 4
1"
b1000 *
b1000 -
b1000 .
b1000 2
b1000 5
b1000 6
b1100 !
b1100 &
b1100 )
b1100 /
b1100 1
b1100 7
b110 $
b101 #
b101 %
#14
0"
#15
b110 '
b110 (
b110 ,
b110 0
b110 4
1"
b1010 *
b1010 -
b1010 .
b1010 2
b1010 5
b1010 6
b10000 !
b10000 &
b10000 )
b10000 /
b10000 1
b10000 7
b111 $
b110 #
b110 %
#16
0"
#17
b111 +
b111 3
b111 '
b111 (
b111 ,
b111 0
b111 4
1"
b1100 *
b1100 -
b1100 .
b1100 2
b1100 5
b1100 6
b10100 !
b10100 &
b10100 )
b10100 /
b10100 1
b10100 7
b1000 $
b111 #
b111 %
#18
0"
#19
b1000 '
b1000 (
b1000 ,
b1000 0
b1000 4
1"
b1110 *
b1110 -
b1110 .
b1110 2
b1110 5
b1110 6
b11000 !
b11000 &
b11000 )
b11000 /
b11000 1
b11000 7
b1001 $
b1000 #
b1000 %
#20
0"
#21
b1000 +
b1000 3
1"
b10000 *
b10000 -
b10000 .
b10000 2
b10000 5
b10000 6
b11100 !
b11100 &
b11100 )
b11100 /
b11100 1
b11100 7
#22
0"
#23
1"
b100000 !
b100000 &
b100000 )
b100000 /
b100000 1
b100000 7
#24
0"
#25
1"
#26
0"
#27
1"
#28
0"
#29
1"
#30
0"
#31
1"
#32
0"
#33
1"
#34
0"
#35
1"
#36
0"
#37
1"
#38
0"
#39
1"
#40
0"
#41
1"
#42
0"
#43
1"
#44
0"
#45
1"
#46
0"
#47
1"
#48
0"
#49
1"
